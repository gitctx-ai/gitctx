interactions:
- request:
    body: '{"input": ["*.pyc\n__pycache__/\n.gitctx/"], "model": "text-embedding-3-large",
      "dimensions": 3072, "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '121'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        12,\n    \"total_tokens\": 12\n  }\n}\n"
    headers:
      CF-RAY:
      - 98e3bc093b12cee9-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 14 Oct 2025 02:44:22 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=kA7QoVxuZBsBWoegKRJ3BaLHy_wwpaYnR_qHxpa0S7c-1760409862-1.0.1.1-sM0zH_u3MQYfv_rKL906jmiTaSs.bmA2kub2rJbYbmx8gDZvbk2ntDcV_bHec4LgNostZNW_wU.3W4hJSK3kidzGNjeajai9.774KBxmmGg;
        path=/; expires=Tue, 14-Oct-25 03:14:22 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=ZOF4yyf2W69w2Szma_R6Lrbhmby9TjPnNsw7FtrwKv8-1760409862788-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16608'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - user-xpjgvt8r6ahautifbt2prhie
      openai-processing-ms:
      - '71'
      openai-project:
      - proj_mvPOXsElPbT4Fz0z56XsH4tN
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-6566bf4bb9-gbnf8
      x-envoy-upstream-service-time:
      - '106'
      x-openai-proxy-wasm:
      - v0.1
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999994'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_14702eef765e4e2e9aaf567215d40d0b
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["print(\"Hello from gitctx test\")"], "model": "text-embedding-3-large",
      "dimensions": 3072, "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '125'
      content-type:
      - application/json
      cookie:
      - __cf_bm=kA7QoVxuZBsBWoegKRJ3BaLHy_wwpaYnR_qHxpa0S7c-1760409862-1.0.1.1-sM0zH_u3MQYfv_rKL906jmiTaSs.bmA2kub2rJbYbmx8gDZvbk2ntDcV_bHec4LgNostZNW_wU.3W4hJSK3kidzGNjeajai9.774KBxmmGg;
        _cfuvid=ZOF4yyf2W69w2Szma_R6Lrbhmby9TjPnNsw7FtrwKv8-1760409862788-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        8,\n    \"total_tokens\": 8\n  }\n}\n"
    headers:
      CF-RAY:
      - 98e3bc0acdfecee9-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 14 Oct 2025 02:44:23 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16606'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - user-xpjgvt8r6ahautifbt2prhie
      openai-processing-ms:
      - '339'
      openai-project:
      - proj_mvPOXsElPbT4Fz0z56XsH4tN
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-b69d7bdb9-hn4sg
      x-envoy-upstream-service-time:
      - '366'
      x-openai-proxy-wasm:
      - v0.1
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999993'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_e038ec0ff9454974b12444104404ec98
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["*.pyc\n__pycache__/\n.gitctx/"], "model": "text-embedding-3-large",
      "dimensions": 3072, "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '121'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e40365ca6922a2-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:33:05 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=lib1KmNNcxx5r_qk7XDErVDXPyAs_3cxUSnQbP2G6Fc-1760412785-1.0.1.1-yom2YDoFkTZE.9RTfhI02UHmvr6Rh9jDVYJzv2R7QCgYYV5gWUyQ_abdJ4D6VlWTaoJ9XA7AfzHRnXgJCU5tnbw5kmN9YaOI6m9BAWhH4Fk;
        path=/; expires=Tue, 14-Oct-25 04:03:05 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=6Wpuz1AiLYu5U_kK7T.tY8TAYn33UKtu50A1sBJObgw-1760412785636-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '4'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_1451019948e44a928200ca76cbea6e53
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["print(\"Hello from gitctx test\")"], "model": "text-embedding-3-large",
      "dimensions": 3072, "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '125'
      content-type:
      - application/json
      cookie:
      - __cf_bm=lib1KmNNcxx5r_qk7XDErVDXPyAs_3cxUSnQbP2G6Fc-1760412785-1.0.1.1-yom2YDoFkTZE.9RTfhI02UHmvr6Rh9jDVYJzv2R7QCgYYV5gWUyQ_abdJ4D6VlWTaoJ9XA7AfzHRnXgJCU5tnbw5kmN9YaOI6m9BAWhH4Fk;
        _cfuvid=6Wpuz1AiLYu5U_kK7T.tY8TAYn33UKtu50A1sBJObgw-1760412785636-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e403665b5622a2-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:33:05 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '1'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_c6253520ca2042349df7abd7b126fb2e
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["*.pyc\n__pycache__/\n.gitctx/"], "model": "text-embedding-3-large",
      "dimensions": 3072, "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '121'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e406434940e678-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:35:03 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=Mwl3EU5NNCjy1AolkMlnS9f0M0OWWg1xewlGuVRZZ80-1760412903-1.0.1.1-8ObzadhExM9EZs7jBjgIfdMOkKMlgqHIiF4FCNQmXzFezzWOArttTd0.YF4RxzveK4wF1tlQoPGnlJJfYBcXR8YVmn7R.N1B3gxE2yp_e2Q;
        path=/; expires=Tue, 14-Oct-25 04:05:03 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=7432Tq2R1Jnngwp9L.OXFmjuZxO0ey1ZUsCRBFFURRI-1760412903012-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '2'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_39b7a219f80f42be92dc4751f76e4016
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["print(\"Hello from gitctx test\")"], "model": "text-embedding-3-large",
      "dimensions": 3072, "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '125'
      content-type:
      - application/json
      cookie:
      - __cf_bm=Mwl3EU5NNCjy1AolkMlnS9f0M0OWWg1xewlGuVRZZ80-1760412903-1.0.1.1-8ObzadhExM9EZs7jBjgIfdMOkKMlgqHIiF4FCNQmXzFezzWOArttTd0.YF4RxzveK4wF1tlQoPGnlJJfYBcXR8YVmn7R.N1B3gxE2yp_e2Q;
        _cfuvid=7432Tq2R1Jnngwp9L.OXFmjuZxO0ey1ZUsCRBFFURRI-1760412903012-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e40643eb60e678-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:35:03 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '4'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_073eb55d67f04bc2bd6a4f5a3e85a02e
    status:
      code: 401
      message: Unauthorized
version: 1
