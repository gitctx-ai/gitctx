interactions:
- request:
    body: '{"input": ["*.pyc\n__pycache__/\n.gitctx/"], "model": "text-embedding-3-large",
      "dimensions": 3072, "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '121'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        12,\n    \"total_tokens\": 12\n  }\n}\n"
    headers:
      CF-RAY:
      - 98e3bbcd5f0835d6-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 14 Oct 2025 02:44:13 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=5skdEtZUKIhDAlsnCnM1VJDK17azJ5hk0HGFAsofhsE-1760409853-1.0.1.1-ikNBQU8FayMUP5iHaDcUGm8dUdG5SVIR55us.GtSr9l0xpOUWaTCGJzELFEtouTonn5LeJ4KexLqoAFKiFbbcA2Tuv3VPxoN1cZTQ3ncr6Q;
        path=/; expires=Tue, 14-Oct-25 03:14:13 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=.gwEiCDyVYZdC_HhshPgd7htEL4Af4z854u7Uw35wUc-1760409853163-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16608'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - user-xpjgvt8r6ahautifbt2prhie
      openai-processing-ms:
      - '91'
      openai-project:
      - proj_mvPOXsElPbT4Fz0z56XsH4tN
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-66d9959958-92q46
      x-envoy-upstream-service-time:
      - '110'
      x-openai-proxy-wasm:
      - v0.1
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999994'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_490d6294ef604025bc72ac2371a3d07b
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["def function_0():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '193'
      content-type:
      - application/json
      cookie:
      - __cf_bm=5skdEtZUKIhDAlsnCnM1VJDK17azJ5hk0HGFAsofhsE-1760409853-1.0.1.1-ikNBQU8FayMUP5iHaDcUGm8dUdG5SVIR55us.GtSr9l0xpOUWaTCGJzELFEtouTonn5LeJ4KexLqoAFKiFbbcA2Tuv3VPxoN1cZTQ3ncr6Q;
        _cfuvid=.gwEiCDyVYZdC_HhshPgd7htEL4Af4z854u7Uw35wUc-1760409853163-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        17,\n    \"total_tokens\": 17\n  }\n}\n"
    headers:
      CF-RAY:
      - 98e3bbcf0d6c35d6-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 14 Oct 2025 02:44:13 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16608'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - user-xpjgvt8r6ahautifbt2prhie
      openai-processing-ms:
      - '109'
      openai-project:
      - proj_mvPOXsElPbT4Fz0z56XsH4tN
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-canary-5b8d9f7bb5-869s2
      x-envoy-upstream-service-time:
      - '143'
      x-openai-proxy-wasm:
      - v0.1
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999977'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_bffee324459440388d665a510e37c4c3
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["def function_1():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '193'
      content-type:
      - application/json
      cookie:
      - __cf_bm=5skdEtZUKIhDAlsnCnM1VJDK17azJ5hk0HGFAsofhsE-1760409853-1.0.1.1-ikNBQU8FayMUP5iHaDcUGm8dUdG5SVIR55us.GtSr9l0xpOUWaTCGJzELFEtouTonn5LeJ4KexLqoAFKiFbbcA2Tuv3VPxoN1cZTQ3ncr6Q;
        _cfuvid=.gwEiCDyVYZdC_HhshPgd7htEL4Af4z854u7Uw35wUc-1760409853163-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        17,\n    \"total_tokens\": 17\n  }\n}\n"
    headers:
      CF-RAY:
      - 98e3bbd0ab7a35d6-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 14 Oct 2025 02:44:13 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16608'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - user-xpjgvt8r6ahautifbt2prhie
      openai-processing-ms:
      - '83'
      openai-project:
      - proj_mvPOXsElPbT4Fz0z56XsH4tN
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-5984f57dff-6blms
      x-envoy-upstream-service-time:
      - '123'
      x-openai-proxy-wasm:
      - v0.1
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999977'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_fbe37aff75cd43fe940d24b9a5731d54
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["def function_10():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=5skdEtZUKIhDAlsnCnM1VJDK17azJ5hk0HGFAsofhsE-1760409853-1.0.1.1-ikNBQU8FayMUP5iHaDcUGm8dUdG5SVIR55us.GtSr9l0xpOUWaTCGJzELFEtouTonn5LeJ4KexLqoAFKiFbbcA2Tuv3VPxoN1cZTQ3ncr6Q;
        _cfuvid=.gwEiCDyVYZdC_HhshPgd7htEL4Af4z854u7Uw35wUc-1760409853163-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        17,\n    \"total_tokens\": 17\n  }\n}\n"
    headers:
      CF-RAY:
      - 98e3bbd2394335d6-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 14 Oct 2025 02:44:13 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16608'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - user-xpjgvt8r6ahautifbt2prhie
      openai-processing-ms:
      - '63'
      openai-project:
      - proj_mvPOXsElPbT4Fz0z56XsH4tN
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-9d857fccf-qdwj6
      x-envoy-upstream-service-time:
      - '82'
      x-openai-proxy-wasm:
      - v0.1
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999977'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_3ed3f718f0914ce28bbdcce00e83c396
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["def function_11():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=5skdEtZUKIhDAlsnCnM1VJDK17azJ5hk0HGFAsofhsE-1760409853-1.0.1.1-ikNBQU8FayMUP5iHaDcUGm8dUdG5SVIR55us.GtSr9l0xpOUWaTCGJzELFEtouTonn5LeJ4KexLqoAFKiFbbcA2Tuv3VPxoN1cZTQ3ncr6Q;
        _cfuvid=.gwEiCDyVYZdC_HhshPgd7htEL4Af4z854u7Uw35wUc-1760409853163-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        17,\n    \"total_tokens\": 17\n  }\n}\n"
    headers:
      CF-RAY:
      - 98e3bbd2fc2a35d6-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 14 Oct 2025 02:44:14 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16608'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - user-xpjgvt8r6ahautifbt2prhie
      openai-processing-ms:
      - '72'
      openai-project:
      - proj_mvPOXsElPbT4Fz0z56XsH4tN
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-6566bf4bb9-pldzp
      x-envoy-upstream-service-time:
      - '92'
      x-openai-proxy-wasm:
      - v0.1
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999977'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_6dab3939ed6b4e468cd8b13443dbac9a
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["def function_12():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=5skdEtZUKIhDAlsnCnM1VJDK17azJ5hk0HGFAsofhsE-1760409853-1.0.1.1-ikNBQU8FayMUP5iHaDcUGm8dUdG5SVIR55us.GtSr9l0xpOUWaTCGJzELFEtouTonn5LeJ4KexLqoAFKiFbbcA2Tuv3VPxoN1cZTQ3ncr6Q;
        _cfuvid=.gwEiCDyVYZdC_HhshPgd7htEL4Af4z854u7Uw35wUc-1760409853163-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        17,\n    \"total_tokens\": 17\n  }\n}\n"
    headers:
      CF-RAY:
      - 98e3bbd4181e35d6-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 14 Oct 2025 02:44:14 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16608'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - user-xpjgvt8r6ahautifbt2prhie
      openai-processing-ms:
      - '447'
      openai-project:
      - proj_mvPOXsElPbT4Fz0z56XsH4tN
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-canary-5b8d9f7bb5-869s2
      x-envoy-upstream-service-time:
      - '483'
      x-openai-proxy-wasm:
      - v0.1
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999976'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_58c2d5d090fc466f8cf9ba019ed7670b
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["def function_13():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=5skdEtZUKIhDAlsnCnM1VJDK17azJ5hk0HGFAsofhsE-1760409853-1.0.1.1-ikNBQU8FayMUP5iHaDcUGm8dUdG5SVIR55us.GtSr9l0xpOUWaTCGJzELFEtouTonn5LeJ4KexLqoAFKiFbbcA2Tuv3VPxoN1cZTQ3ncr6Q;
        _cfuvid=.gwEiCDyVYZdC_HhshPgd7htEL4Af4z854u7Uw35wUc-1760409853163-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        17,\n    \"total_tokens\": 17\n  }\n}\n"
    headers:
      CF-RAY:
      - 98e3bbd7fce635d6-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 14 Oct 2025 02:44:14 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16608'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - user-xpjgvt8r6ahautifbt2prhie
      openai-processing-ms:
      - '90'
      openai-project:
      - proj_mvPOXsElPbT4Fz0z56XsH4tN
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-84f49bd565-6cxnx
      x-envoy-upstream-service-time:
      - '108'
      x-openai-proxy-wasm:
      - v0.1
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999977'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_f8387fca3a974baa98a589131d79cb7c
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["def function_14():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=5skdEtZUKIhDAlsnCnM1VJDK17azJ5hk0HGFAsofhsE-1760409853-1.0.1.1-ikNBQU8FayMUP5iHaDcUGm8dUdG5SVIR55us.GtSr9l0xpOUWaTCGJzELFEtouTonn5LeJ4KexLqoAFKiFbbcA2Tuv3VPxoN1cZTQ3ncr6Q;
        _cfuvid=.gwEiCDyVYZdC_HhshPgd7htEL4Af4z854u7Uw35wUc-1760409853163-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        17,\n    \"total_tokens\": 17\n  }\n}\n"
    headers:
      CF-RAY:
      - 98e3bbd918f735d6-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 14 Oct 2025 02:44:15 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16608'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - user-xpjgvt8r6ahautifbt2prhie
      openai-processing-ms:
      - '98'
      openai-project:
      - proj_mvPOXsElPbT4Fz0z56XsH4tN
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-697997b774-jpbnh
      x-envoy-upstream-service-time:
      - '141'
      x-openai-proxy-wasm:
      - v0.1
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999977'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_7fed96aa2f864b17a57311052063fd61
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["def function_15():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=5skdEtZUKIhDAlsnCnM1VJDK17azJ5hk0HGFAsofhsE-1760409853-1.0.1.1-ikNBQU8FayMUP5iHaDcUGm8dUdG5SVIR55us.GtSr9l0xpOUWaTCGJzELFEtouTonn5LeJ4KexLqoAFKiFbbcA2Tuv3VPxoN1cZTQ3ncr6Q;
        _cfuvid=.gwEiCDyVYZdC_HhshPgd7htEL4Af4z854u7Uw35wUc-1760409853163-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        17,\n    \"total_tokens\": 17\n  }\n}\n"
    headers:
      CF-RAY:
      - 98e3bbda8d8135d6-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 14 Oct 2025 02:44:15 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16608'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - user-xpjgvt8r6ahautifbt2prhie
      openai-processing-ms:
      - '226'
      openai-project:
      - proj_mvPOXsElPbT4Fz0z56XsH4tN
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-6566bf4bb9-xzzhm
      x-envoy-upstream-service-time:
      - '313'
      x-openai-proxy-wasm:
      - v0.1
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999977'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_08a4d13978c145b89af8148b9b3b866e
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["def function_16():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=5skdEtZUKIhDAlsnCnM1VJDK17azJ5hk0HGFAsofhsE-1760409853-1.0.1.1-ikNBQU8FayMUP5iHaDcUGm8dUdG5SVIR55us.GtSr9l0xpOUWaTCGJzELFEtouTonn5LeJ4KexLqoAFKiFbbcA2Tuv3VPxoN1cZTQ3ncr6Q;
        _cfuvid=.gwEiCDyVYZdC_HhshPgd7htEL4Af4z854u7Uw35wUc-1760409853163-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        17,\n    \"total_tokens\": 17\n  }\n}\n"
    headers:
      CF-RAY:
      - 98e3bbdd1e3235d6-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 14 Oct 2025 02:44:15 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16608'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - user-xpjgvt8r6ahautifbt2prhie
      openai-processing-ms:
      - '122'
      openai-project:
      - proj_mvPOXsElPbT4Fz0z56XsH4tN
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-84f49bd565-665rq
      x-envoy-upstream-service-time:
      - '147'
      x-openai-proxy-wasm:
      - v0.1
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999977'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_d86e48184ac34bbbb8d51cdf034a3303
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["def function_17():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=5skdEtZUKIhDAlsnCnM1VJDK17azJ5hk0HGFAsofhsE-1760409853-1.0.1.1-ikNBQU8FayMUP5iHaDcUGm8dUdG5SVIR55us.GtSr9l0xpOUWaTCGJzELFEtouTonn5LeJ4KexLqoAFKiFbbcA2Tuv3VPxoN1cZTQ3ncr6Q;
        _cfuvid=.gwEiCDyVYZdC_HhshPgd7htEL4Af4z854u7Uw35wUc-1760409853163-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"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\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        17,\n    \"total_tokens\": 17\n  }\n}\n"
    headers:
      CF-RAY:
      - 98e3bbdecbdc35d6-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 14 Oct 2025 02:44:16 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16608'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - user-xpjgvt8r6ahautifbt2prhie
      openai-processing-ms:
      - '198'
      openai-project:
      - proj_mvPOXsElPbT4Fz0z56XsH4tN
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-9d857fccf-cm7bf
      x-envoy-upstream-service-time:
      - '218'
      x-openai-proxy-wasm:
      - v0.1
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999977'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_b3250fbf5a22453ca17c057c855843db
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["def function_18():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=5skdEtZUKIhDAlsnCnM1VJDK17azJ5hk0HGFAsofhsE-1760409853-1.0.1.1-ikNBQU8FayMUP5iHaDcUGm8dUdG5SVIR55us.GtSr9l0xpOUWaTCGJzELFEtouTonn5LeJ4KexLqoAFKiFbbcA2Tuv3VPxoN1cZTQ3ncr6Q;
        _cfuvid=.gwEiCDyVYZdC_HhshPgd7htEL4Af4z854u7Uw35wUc-1760409853163-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        17,\n    \"total_tokens\": 17\n  }\n}\n"
    headers:
      CF-RAY:
      - 98e3bbe079a035d6-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 14 Oct 2025 02:44:16 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16608'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - user-xpjgvt8r6ahautifbt2prhie
      openai-processing-ms:
      - '55'
      openai-project:
      - proj_mvPOXsElPbT4Fz0z56XsH4tN
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-9d857fccf-n9gjq
      x-envoy-upstream-service-time:
      - '74'
      x-openai-proxy-wasm:
      - v0.1
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999977'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_d41d87805244468f8f506b1943e1df11
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["def function_19():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=5skdEtZUKIhDAlsnCnM1VJDK17azJ5hk0HGFAsofhsE-1760409853-1.0.1.1-ikNBQU8FayMUP5iHaDcUGm8dUdG5SVIR55us.GtSr9l0xpOUWaTCGJzELFEtouTonn5LeJ4KexLqoAFKiFbbcA2Tuv3VPxoN1cZTQ3ncr6Q;
        _cfuvid=.gwEiCDyVYZdC_HhshPgd7htEL4Af4z854u7Uw35wUc-1760409853163-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        17,\n    \"total_tokens\": 17\n  }\n}\n"
    headers:
      CF-RAY:
      - 98e3bbe13c7335d6-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 14 Oct 2025 02:44:16 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16608'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - user-xpjgvt8r6ahautifbt2prhie
      openai-processing-ms:
      - '69'
      openai-project:
      - proj_mvPOXsElPbT4Fz0z56XsH4tN
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-6566bf4bb9-vtdcl
      x-envoy-upstream-service-time:
      - '89'
      x-openai-proxy-wasm:
      - v0.1
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999977'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_f238bfce835e4db48ccc89d2c2684966
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["def function_2():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '193'
      content-type:
      - application/json
      cookie:
      - __cf_bm=5skdEtZUKIhDAlsnCnM1VJDK17azJ5hk0HGFAsofhsE-1760409853-1.0.1.1-ikNBQU8FayMUP5iHaDcUGm8dUdG5SVIR55us.GtSr9l0xpOUWaTCGJzELFEtouTonn5LeJ4KexLqoAFKiFbbcA2Tuv3VPxoN1cZTQ3ncr6Q;
        _cfuvid=.gwEiCDyVYZdC_HhshPgd7htEL4Af4z854u7Uw35wUc-1760409853163-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        17,\n    \"total_tokens\": 17\n  }\n}\n"
    headers:
      CF-RAY:
      - 98e3bbe2689235d6-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 14 Oct 2025 02:44:16 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16608'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - user-xpjgvt8r6ahautifbt2prhie
      openai-processing-ms:
      - '62'
      openai-project:
      - proj_mvPOXsElPbT4Fz0z56XsH4tN
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-9d857fccf-n9gjq
      x-envoy-upstream-service-time:
      - '80'
      x-openai-proxy-wasm:
      - v0.1
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999977'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_3cb27c8851ef4487904896d8624a788d
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["def function_20():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=5skdEtZUKIhDAlsnCnM1VJDK17azJ5hk0HGFAsofhsE-1760409853-1.0.1.1-ikNBQU8FayMUP5iHaDcUGm8dUdG5SVIR55us.GtSr9l0xpOUWaTCGJzELFEtouTonn5LeJ4KexLqoAFKiFbbcA2Tuv3VPxoN1cZTQ3ncr6Q;
        _cfuvid=.gwEiCDyVYZdC_HhshPgd7htEL4Af4z854u7Uw35wUc-1760409853163-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        17,\n    \"total_tokens\": 17\n  }\n}\n"
    headers:
      CF-RAY:
      - 98e3bbe32b5735d6-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 14 Oct 2025 02:44:16 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16608'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - user-xpjgvt8r6ahautifbt2prhie
      openai-processing-ms:
      - '156'
      openai-project:
      - proj_mvPOXsElPbT4Fz0z56XsH4tN
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-5f4d7659b8-62sz5
      x-envoy-upstream-service-time:
      - '191'
      x-openai-proxy-wasm:
      - v0.1
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999977'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_88107c4ceb254480ad69f2845f024ea8
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["def function_21():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=5skdEtZUKIhDAlsnCnM1VJDK17azJ5hk0HGFAsofhsE-1760409853-1.0.1.1-ikNBQU8FayMUP5iHaDcUGm8dUdG5SVIR55us.GtSr9l0xpOUWaTCGJzELFEtouTonn5LeJ4KexLqoAFKiFbbcA2Tuv3VPxoN1cZTQ3ncr6Q;
        _cfuvid=.gwEiCDyVYZdC_HhshPgd7htEL4Af4z854u7Uw35wUc-1760409853163-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        17,\n    \"total_tokens\": 17\n  }\n}\n"
    headers:
      CF-RAY:
      - 98e3bbe4d94c35d6-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 14 Oct 2025 02:44:16 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16608'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - user-xpjgvt8r6ahautifbt2prhie
      openai-processing-ms:
      - '79'
      openai-project:
      - proj_mvPOXsElPbT4Fz0z56XsH4tN
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-5984f57dff-hqwvk
      x-envoy-upstream-service-time:
      - '116'
      x-openai-proxy-wasm:
      - v0.1
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999977'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_85b09b18abc84bbe9e479d09ef8b73c6
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["def function_22():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=5skdEtZUKIhDAlsnCnM1VJDK17azJ5hk0HGFAsofhsE-1760409853-1.0.1.1-ikNBQU8FayMUP5iHaDcUGm8dUdG5SVIR55us.GtSr9l0xpOUWaTCGJzELFEtouTonn5LeJ4KexLqoAFKiFbbcA2Tuv3VPxoN1cZTQ3ncr6Q;
        _cfuvid=.gwEiCDyVYZdC_HhshPgd7htEL4Af4z854u7Uw35wUc-1760409853163-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        17,\n    \"total_tokens\": 17\n  }\n}\n"
    headers:
      CF-RAY:
      - 98e3bbe5fcb535d6-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 14 Oct 2025 02:44:17 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16608'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - user-xpjgvt8r6ahautifbt2prhie
      openai-processing-ms:
      - '69'
      openai-project:
      - proj_mvPOXsElPbT4Fz0z56XsH4tN
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-9d857fccf-mx2bt
      x-envoy-upstream-service-time:
      - '88'
      x-openai-proxy-wasm:
      - v0.1
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999977'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_50da9a06f63247bbbc2cd8ab254b755b
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["def function_23():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=5skdEtZUKIhDAlsnCnM1VJDK17azJ5hk0HGFAsofhsE-1760409853-1.0.1.1-ikNBQU8FayMUP5iHaDcUGm8dUdG5SVIR55us.GtSr9l0xpOUWaTCGJzELFEtouTonn5LeJ4KexLqoAFKiFbbcA2Tuv3VPxoN1cZTQ3ncr6Q;
        _cfuvid=.gwEiCDyVYZdC_HhshPgd7htEL4Af4z854u7Uw35wUc-1760409853163-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        17,\n    \"total_tokens\": 17\n  }\n}\n"
    headers:
      CF-RAY:
      - 98e3bbe6df7235d6-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 14 Oct 2025 02:44:17 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16608'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - user-xpjgvt8r6ahautifbt2prhie
      openai-processing-ms:
      - '129'
      openai-project:
      - proj_mvPOXsElPbT4Fz0z56XsH4tN
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-66d9959958-tg7pc
      x-envoy-upstream-service-time:
      - '149'
      x-openai-proxy-wasm:
      - v0.1
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999977'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_9372a9f074224f0182139a9d98e772bb
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["def function_24():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=5skdEtZUKIhDAlsnCnM1VJDK17azJ5hk0HGFAsofhsE-1760409853-1.0.1.1-ikNBQU8FayMUP5iHaDcUGm8dUdG5SVIR55us.GtSr9l0xpOUWaTCGJzELFEtouTonn5LeJ4KexLqoAFKiFbbcA2Tuv3VPxoN1cZTQ3ncr6Q;
        _cfuvid=.gwEiCDyVYZdC_HhshPgd7htEL4Af4z854u7Uw35wUc-1760409853163-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        17,\n    \"total_tokens\": 17\n  }\n}\n"
    headers:
      CF-RAY:
      - 98e3bbe89de435d6-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 14 Oct 2025 02:44:18 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16608'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - user-xpjgvt8r6ahautifbt2prhie
      openai-processing-ms:
      - '676'
      openai-project:
      - proj_mvPOXsElPbT4Fz0z56XsH4tN
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-84f49bd565-9qdsj
      x-envoy-upstream-service-time:
      - '700'
      x-openai-proxy-wasm:
      - v0.1
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999977'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_9bfae471a81f4eca88776daa01ec616b
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["def function_3():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '193'
      content-type:
      - application/json
      cookie:
      - __cf_bm=5skdEtZUKIhDAlsnCnM1VJDK17azJ5hk0HGFAsofhsE-1760409853-1.0.1.1-ikNBQU8FayMUP5iHaDcUGm8dUdG5SVIR55us.GtSr9l0xpOUWaTCGJzELFEtouTonn5LeJ4KexLqoAFKiFbbcA2Tuv3VPxoN1cZTQ3ncr6Q;
        _cfuvid=.gwEiCDyVYZdC_HhshPgd7htEL4Af4z854u7Uw35wUc-1760409853163-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        17,\n    \"total_tokens\": 17\n  }\n}\n"
    headers:
      CF-RAY:
      - 98e3bbed8e4235d6-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 14 Oct 2025 02:44:18 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16608'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - user-xpjgvt8r6ahautifbt2prhie
      openai-processing-ms:
      - '172'
      openai-project:
      - proj_mvPOXsElPbT4Fz0z56XsH4tN
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-6566bf4bb9-4pzzn
      x-envoy-upstream-service-time:
      - '195'
      x-openai-proxy-wasm:
      - v0.1
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999977'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_81fd257859ca4e8bbb4f595a2fe4dfdd
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["def function_4():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '193'
      content-type:
      - application/json
      cookie:
      - __cf_bm=5skdEtZUKIhDAlsnCnM1VJDK17azJ5hk0HGFAsofhsE-1760409853-1.0.1.1-ikNBQU8FayMUP5iHaDcUGm8dUdG5SVIR55us.GtSr9l0xpOUWaTCGJzELFEtouTonn5LeJ4KexLqoAFKiFbbcA2Tuv3VPxoN1cZTQ3ncr6Q;
        _cfuvid=.gwEiCDyVYZdC_HhshPgd7htEL4Af4z854u7Uw35wUc-1760409853163-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        17,\n    \"total_tokens\": 17\n  }\n}\n"
    headers:
      CF-RAY:
      - 98e3bbefacfb35d6-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 14 Oct 2025 02:44:18 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16608'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - user-xpjgvt8r6ahautifbt2prhie
      openai-processing-ms:
      - '213'
      openai-project:
      - proj_mvPOXsElPbT4Fz0z56XsH4tN
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-6566bf4bb9-z2stw
      x-envoy-upstream-service-time:
      - '232'
      x-openai-proxy-wasm:
      - v0.1
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999977'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_f94da9ea36a14321ae74ac2d3a4ac51c
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["def function_5():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '193'
      content-type:
      - application/json
      cookie:
      - __cf_bm=5skdEtZUKIhDAlsnCnM1VJDK17azJ5hk0HGFAsofhsE-1760409853-1.0.1.1-ikNBQU8FayMUP5iHaDcUGm8dUdG5SVIR55us.GtSr9l0xpOUWaTCGJzELFEtouTonn5LeJ4KexLqoAFKiFbbcA2Tuv3VPxoN1cZTQ3ncr6Q;
        _cfuvid=.gwEiCDyVYZdC_HhshPgd7htEL4Af4z854u7Uw35wUc-1760409853163-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        17,\n    \"total_tokens\": 17\n  }\n}\n"
    headers:
      CF-RAY:
      - 98e3bbf1abf735d6-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 14 Oct 2025 02:44:19 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16608'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - user-xpjgvt8r6ahautifbt2prhie
      openai-processing-ms:
      - '100'
      openai-project:
      - proj_mvPOXsElPbT4Fz0z56XsH4tN
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-697997b774-xz5bl
      x-envoy-upstream-service-time:
      - '140'
      x-openai-proxy-wasm:
      - v0.1
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999977'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_42b7909651e749509284547e5e8459e8
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["def function_6():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '193'
      content-type:
      - application/json
      cookie:
      - __cf_bm=5skdEtZUKIhDAlsnCnM1VJDK17azJ5hk0HGFAsofhsE-1760409853-1.0.1.1-ikNBQU8FayMUP5iHaDcUGm8dUdG5SVIR55us.GtSr9l0xpOUWaTCGJzELFEtouTonn5LeJ4KexLqoAFKiFbbcA2Tuv3VPxoN1cZTQ3ncr6Q;
        _cfuvid=.gwEiCDyVYZdC_HhshPgd7htEL4Af4z854u7Uw35wUc-1760409853163-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        17,\n    \"total_tokens\": 17\n  }\n}\n"
    headers:
      CF-RAY:
      - 98e3bbf318c935d6-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 14 Oct 2025 02:44:19 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16608'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - user-xpjgvt8r6ahautifbt2prhie
      openai-processing-ms:
      - '412'
      openai-project:
      - proj_mvPOXsElPbT4Fz0z56XsH4tN
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-9d857fccf-zx44s
      x-envoy-upstream-service-time:
      - '434'
      x-openai-proxy-wasm:
      - v0.1
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999977'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_3c7ae893e6da4995a3228febf7555454
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["def function_7():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '193'
      content-type:
      - application/json
      cookie:
      - __cf_bm=5skdEtZUKIhDAlsnCnM1VJDK17azJ5hk0HGFAsofhsE-1760409853-1.0.1.1-ikNBQU8FayMUP5iHaDcUGm8dUdG5SVIR55us.GtSr9l0xpOUWaTCGJzELFEtouTonn5LeJ4KexLqoAFKiFbbcA2Tuv3VPxoN1cZTQ3ncr6Q;
        _cfuvid=.gwEiCDyVYZdC_HhshPgd7htEL4Af4z854u7Uw35wUc-1760409853163-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        17,\n    \"total_tokens\": 17\n  }\n}\n"
    headers:
      CF-RAY:
      - 98e3bbf6bc9e35d6-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 14 Oct 2025 02:44:19 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16608'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - user-xpjgvt8r6ahautifbt2prhie
      openai-processing-ms:
      - '66'
      openai-project:
      - proj_mvPOXsElPbT4Fz0z56XsH4tN
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-9d857fccf-qsjq8
      x-envoy-upstream-service-time:
      - '85'
      x-openai-proxy-wasm:
      - v0.1
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999977'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_e2952d39c57c46e3b2f8c0ca772d027b
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["def function_8():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '193'
      content-type:
      - application/json
      cookie:
      - __cf_bm=5skdEtZUKIhDAlsnCnM1VJDK17azJ5hk0HGFAsofhsE-1760409853-1.0.1.1-ikNBQU8FayMUP5iHaDcUGm8dUdG5SVIR55us.GtSr9l0xpOUWaTCGJzELFEtouTonn5LeJ4KexLqoAFKiFbbcA2Tuv3VPxoN1cZTQ3ncr6Q;
        _cfuvid=.gwEiCDyVYZdC_HhshPgd7htEL4Af4z854u7Uw35wUc-1760409853163-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        17,\n    \"total_tokens\": 17\n  }\n}\n"
    headers:
      CF-RAY:
      - 98e3bbf78f6b35d6-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 14 Oct 2025 02:44:19 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16608'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - user-xpjgvt8r6ahautifbt2prhie
      openai-processing-ms:
      - '111'
      openai-project:
      - proj_mvPOXsElPbT4Fz0z56XsH4tN
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-9d857fccf-rdlkz
      x-envoy-upstream-service-time:
      - '127'
      x-openai-proxy-wasm:
      - v0.1
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999977'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_945f1d6d8a5d433ca68f8ee2eb0d5dbb
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["def function_9():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '193'
      content-type:
      - application/json
      cookie:
      - __cf_bm=5skdEtZUKIhDAlsnCnM1VJDK17azJ5hk0HGFAsofhsE-1760409853-1.0.1.1-ikNBQU8FayMUP5iHaDcUGm8dUdG5SVIR55us.GtSr9l0xpOUWaTCGJzELFEtouTonn5LeJ4KexLqoAFKiFbbcA2Tuv3VPxoN1cZTQ3ncr6Q;
        _cfuvid=.gwEiCDyVYZdC_HhshPgd7htEL4Af4z854u7Uw35wUc-1760409853163-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        17,\n    \"total_tokens\": 17\n  }\n}\n"
    headers:
      CF-RAY:
      - 98e3bbf89aa535d6-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 14 Oct 2025 02:44:20 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16608'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - user-xpjgvt8r6ahautifbt2prhie
      openai-processing-ms:
      - '81'
      openai-project:
      - proj_mvPOXsElPbT4Fz0z56XsH4tN
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-6566bf4bb9-tbmr4
      x-envoy-upstream-service-time:
      - '103'
      x-openai-proxy-wasm:
      - v0.1
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999977'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 1ms
      x-request-id:
      - req_61c6730e132f4165ab1aa88157d941fb
    status:
      code: 200
      message: OK
- request:
    body: '{"input": [[12494]], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '97'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - OpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\":
        \"embedding\",\n      \"index\": 0,\n      \"embedding\": \"\"\n
        \   }\n  ],\n  \"model\": \"text-embedding-3-large\",\n  \"usage\": {\n    \"prompt_tokens\":
        1,\n    \"total_tokens\": 1\n  }\n}\n"
    headers:
      CF-RAY:
      - 98e3bbfa39cccf05-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 14 Oct 2025 02:44:20 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=90GFpWDGVBDXDZmyPVLjgZIdIt8FJAlpnNtdYMKx4tg-1760409860-1.0.1.1-BMKSL65KTdwa.XNPCMXi9iCMEjVTsyq1SCW3Zjwaw4BOn5F17PXseFqiYaC0YRQxHarmkOT38DPuIHvu.nxKhvDRPgq3SOO28hL.kt3GbAQ;
        path=/; expires=Tue, 14-Oct-25 03:14:20 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=lvthjBmWWYqdEMQisBsxon4y12FlGSN2mAJl.T8bwYs-1760409860388-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-allow-origin:
      - '*'
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      content-length:
      - '16606'
      openai-model:
      - text-embedding-3-large
      openai-organization:
      - user-xpjgvt8r6ahautifbt2prhie
      openai-processing-ms:
      - '75'
      openai-project:
      - proj_mvPOXsElPbT4Fz0z56XsH4tN
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      via:
      - envoy-router-6566bf4bb9-4pzzn
      x-envoy-upstream-service-time:
      - '94'
      x-openai-proxy-wasm:
      - v0.1
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '1000000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '999999'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_8a2da5c35bab4b0c80c901dde7cc41f8
    status:
      code: 200
      message: OK
- request:
    body: '{"input": ["*.pyc\n__pycache__/\n.gitctx/"], "model": "text-embedding-3-large",
      "dimensions": 3072, "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '121'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e4034cca3debe2-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:33:01 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=l8sBLtWbJyPBSglmE_JwdV2cembTVUtg0hN4i5pufpk-1760412781-1.0.1.1-V8IxQKe5JvvUjsSxeueGfOe5cDgE5k41dJO7yLp37w71fQMNsqnxZDeSM1ixJx_B5fMC.IMsEq.z2Wz8Qgi341_m5GvyR6uP6BsrxWTzmvs;
        path=/; expires=Tue, 14-Oct-25 04:03:01 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=4bziJsS7NURatI5tfaKtZ.KPLKDbs8gnPBekQLLYD0I-1760412781595-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '1'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_d6f6f71ba5e54393af6c0f8980d86f23
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_0():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '193'
      content-type:
      - application/json
      cookie:
      - __cf_bm=l8sBLtWbJyPBSglmE_JwdV2cembTVUtg0hN4i5pufpk-1760412781-1.0.1.1-V8IxQKe5JvvUjsSxeueGfOe5cDgE5k41dJO7yLp37w71fQMNsqnxZDeSM1ixJx_B5fMC.IMsEq.z2Wz8Qgi341_m5GvyR6uP6BsrxWTzmvs;
        _cfuvid=4bziJsS7NURatI5tfaKtZ.KPLKDbs8gnPBekQLLYD0I-1760412781595-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e4034d1b6febe2-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:33:01 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '3'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_1ef5e5ccd5e046f0939efcfb101361cc
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_1():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '193'
      content-type:
      - application/json
      cookie:
      - __cf_bm=l8sBLtWbJyPBSglmE_JwdV2cembTVUtg0hN4i5pufpk-1760412781-1.0.1.1-V8IxQKe5JvvUjsSxeueGfOe5cDgE5k41dJO7yLp37w71fQMNsqnxZDeSM1ixJx_B5fMC.IMsEq.z2Wz8Qgi341_m5GvyR6uP6BsrxWTzmvs;
        _cfuvid=4bziJsS7NURatI5tfaKtZ.KPLKDbs8gnPBekQLLYD0I-1760412781595-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e4034d9d21ebe2-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:33:01 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '2'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_4527ea8b883b4aeb8452c32a1ebaf0d4
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_10():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=l8sBLtWbJyPBSglmE_JwdV2cembTVUtg0hN4i5pufpk-1760412781-1.0.1.1-V8IxQKe5JvvUjsSxeueGfOe5cDgE5k41dJO7yLp37w71fQMNsqnxZDeSM1ixJx_B5fMC.IMsEq.z2Wz8Qgi341_m5GvyR6uP6BsrxWTzmvs;
        _cfuvid=4bziJsS7NURatI5tfaKtZ.KPLKDbs8gnPBekQLLYD0I-1760412781595-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e4034f1b27ebe2-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:33:02 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '2'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_302d10731c3a4a80a789cbb63dae426b
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_11():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=l8sBLtWbJyPBSglmE_JwdV2cembTVUtg0hN4i5pufpk-1760412781-1.0.1.1-V8IxQKe5JvvUjsSxeueGfOe5cDgE5k41dJO7yLp37w71fQMNsqnxZDeSM1ixJx_B5fMC.IMsEq.z2Wz8Qgi341_m5GvyR6uP6BsrxWTzmvs;
        _cfuvid=4bziJsS7NURatI5tfaKtZ.KPLKDbs8gnPBekQLLYD0I-1760412781595-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e403504f64ebe2-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:33:02 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '2'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_591252f705da433783a9f65aa777fb9c
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_12():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=l8sBLtWbJyPBSglmE_JwdV2cembTVUtg0hN4i5pufpk-1760412781-1.0.1.1-V8IxQKe5JvvUjsSxeueGfOe5cDgE5k41dJO7yLp37w71fQMNsqnxZDeSM1ixJx_B5fMC.IMsEq.z2Wz8Qgi341_m5GvyR6uP6BsrxWTzmvs;
        _cfuvid=4bziJsS7NURatI5tfaKtZ.KPLKDbs8gnPBekQLLYD0I-1760412781595-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e40350a89cebe2-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:33:02 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '8'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_c588033524904bfab44b3eacef0d6032
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_13():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=l8sBLtWbJyPBSglmE_JwdV2cembTVUtg0hN4i5pufpk-1760412781-1.0.1.1-V8IxQKe5JvvUjsSxeueGfOe5cDgE5k41dJO7yLp37w71fQMNsqnxZDeSM1ixJx_B5fMC.IMsEq.z2Wz8Qgi341_m5GvyR6uP6BsrxWTzmvs;
        _cfuvid=4bziJsS7NURatI5tfaKtZ.KPLKDbs8gnPBekQLLYD0I-1760412781595-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e403524ea3ebe2-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:33:02 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '1'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_9f26754e6f6748a4b558aac40688e266
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_14():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=l8sBLtWbJyPBSglmE_JwdV2cembTVUtg0hN4i5pufpk-1760412781-1.0.1.1-V8IxQKe5JvvUjsSxeueGfOe5cDgE5k41dJO7yLp37w71fQMNsqnxZDeSM1ixJx_B5fMC.IMsEq.z2Wz8Qgi341_m5GvyR6uP6BsrxWTzmvs;
        _cfuvid=4bziJsS7NURatI5tfaKtZ.KPLKDbs8gnPBekQLLYD0I-1760412781595-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e403530927ebe2-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:33:02 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '0'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_018c07300935494187a7bff2e3af438c
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_15():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=l8sBLtWbJyPBSglmE_JwdV2cembTVUtg0hN4i5pufpk-1760412781-1.0.1.1-V8IxQKe5JvvUjsSxeueGfOe5cDgE5k41dJO7yLp37w71fQMNsqnxZDeSM1ixJx_B5fMC.IMsEq.z2Wz8Qgi341_m5GvyR6uP6BsrxWTzmvs;
        _cfuvid=4bziJsS7NURatI5tfaKtZ.KPLKDbs8gnPBekQLLYD0I-1760412781595-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e403539b06ebe2-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:33:02 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '1'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_1adcd6e67ac04fa995be836b42066720
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_16():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=l8sBLtWbJyPBSglmE_JwdV2cembTVUtg0hN4i5pufpk-1760412781-1.0.1.1-V8IxQKe5JvvUjsSxeueGfOe5cDgE5k41dJO7yLp37w71fQMNsqnxZDeSM1ixJx_B5fMC.IMsEq.z2Wz8Qgi341_m5GvyR6uP6BsrxWTzmvs;
        _cfuvid=4bziJsS7NURatI5tfaKtZ.KPLKDbs8gnPBekQLLYD0I-1760412781595-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e40354cf91ebe2-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:33:03 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '0'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_295c4730b5dd4e259127556f7a0996b4
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_17():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=l8sBLtWbJyPBSglmE_JwdV2cembTVUtg0hN4i5pufpk-1760412781-1.0.1.1-V8IxQKe5JvvUjsSxeueGfOe5cDgE5k41dJO7yLp37w71fQMNsqnxZDeSM1ixJx_B5fMC.IMsEq.z2Wz8Qgi341_m5GvyR6uP6BsrxWTzmvs;
        _cfuvid=4bziJsS7NURatI5tfaKtZ.KPLKDbs8gnPBekQLLYD0I-1760412781595-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e403560c56ebe2-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:33:03 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '2'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_2ec7098b03a54b6aad35889cf78c3e7c
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_18():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=l8sBLtWbJyPBSglmE_JwdV2cembTVUtg0hN4i5pufpk-1760412781-1.0.1.1-V8IxQKe5JvvUjsSxeueGfOe5cDgE5k41dJO7yLp37w71fQMNsqnxZDeSM1ixJx_B5fMC.IMsEq.z2Wz8Qgi341_m5GvyR6uP6BsrxWTzmvs;
        _cfuvid=4bziJsS7NURatI5tfaKtZ.KPLKDbs8gnPBekQLLYD0I-1760412781595-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e403569e33ebe2-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:33:03 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '2'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_58e1d5abc6084bf5b47519cff5801666
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_19():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=l8sBLtWbJyPBSglmE_JwdV2cembTVUtg0hN4i5pufpk-1760412781-1.0.1.1-V8IxQKe5JvvUjsSxeueGfOe5cDgE5k41dJO7yLp37w71fQMNsqnxZDeSM1ixJx_B5fMC.IMsEq.z2Wz8Qgi341_m5GvyR6uP6BsrxWTzmvs;
        _cfuvid=4bziJsS7NURatI5tfaKtZ.KPLKDbs8gnPBekQLLYD0I-1760412781595-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e403572873ebe2-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:33:03 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '0'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_da76df01ea2045a28a3ad5fc4c3e93e6
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_2():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '193'
      content-type:
      - application/json
      cookie:
      - __cf_bm=l8sBLtWbJyPBSglmE_JwdV2cembTVUtg0hN4i5pufpk-1760412781-1.0.1.1-V8IxQKe5JvvUjsSxeueGfOe5cDgE5k41dJO7yLp37w71fQMNsqnxZDeSM1ixJx_B5fMC.IMsEq.z2Wz8Qgi341_m5GvyR6uP6BsrxWTzmvs;
        _cfuvid=4bziJsS7NURatI5tfaKtZ.KPLKDbs8gnPBekQLLYD0I-1760412781595-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e40357eb98ebe2-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:33:03 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '1'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_bb99672c44034d6fb65613581411ef50
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_20():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=l8sBLtWbJyPBSglmE_JwdV2cembTVUtg0hN4i5pufpk-1760412781-1.0.1.1-V8IxQKe5JvvUjsSxeueGfOe5cDgE5k41dJO7yLp37w71fQMNsqnxZDeSM1ixJx_B5fMC.IMsEq.z2Wz8Qgi341_m5GvyR6uP6BsrxWTzmvs;
        _cfuvid=4bziJsS7NURatI5tfaKtZ.KPLKDbs8gnPBekQLLYD0I-1760412781595-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e403585d64ebe2-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:33:03 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '1'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_0bfdd8062c364cb98919dcd455c0b3bc
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_21():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=l8sBLtWbJyPBSglmE_JwdV2cembTVUtg0hN4i5pufpk-1760412781-1.0.1.1-V8IxQKe5JvvUjsSxeueGfOe5cDgE5k41dJO7yLp37w71fQMNsqnxZDeSM1ixJx_B5fMC.IMsEq.z2Wz8Qgi341_m5GvyR6uP6BsrxWTzmvs;
        _cfuvid=4bziJsS7NURatI5tfaKtZ.KPLKDbs8gnPBekQLLYD0I-1760412781595-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e40358cf64ebe2-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:33:03 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '1'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_d14859eeb8ae44bfa6bd72a73ed29363
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_22():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=l8sBLtWbJyPBSglmE_JwdV2cembTVUtg0hN4i5pufpk-1760412781-1.0.1.1-V8IxQKe5JvvUjsSxeueGfOe5cDgE5k41dJO7yLp37w71fQMNsqnxZDeSM1ixJx_B5fMC.IMsEq.z2Wz8Qgi341_m5GvyR6uP6BsrxWTzmvs;
        _cfuvid=4bziJsS7NURatI5tfaKtZ.KPLKDbs8gnPBekQLLYD0I-1760412781595-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e40359aa93ebe2-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:33:03 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '0'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_667ad9d2c2174a9f8a0eb202728bb84d
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_23():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=l8sBLtWbJyPBSglmE_JwdV2cembTVUtg0hN4i5pufpk-1760412781-1.0.1.1-V8IxQKe5JvvUjsSxeueGfOe5cDgE5k41dJO7yLp37w71fQMNsqnxZDeSM1ixJx_B5fMC.IMsEq.z2Wz8Qgi341_m5GvyR6uP6BsrxWTzmvs;
        _cfuvid=4bziJsS7NURatI5tfaKtZ.KPLKDbs8gnPBekQLLYD0I-1760412781595-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e4035a9e36ebe2-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:33:03 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '1'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_ac20702f75f94b8f86e466da67cfec74
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_24():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=l8sBLtWbJyPBSglmE_JwdV2cembTVUtg0hN4i5pufpk-1760412781-1.0.1.1-V8IxQKe5JvvUjsSxeueGfOe5cDgE5k41dJO7yLp37w71fQMNsqnxZDeSM1ixJx_B5fMC.IMsEq.z2Wz8Qgi341_m5GvyR6uP6BsrxWTzmvs;
        _cfuvid=4bziJsS7NURatI5tfaKtZ.KPLKDbs8gnPBekQLLYD0I-1760412781595-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e4035c0c97ebe2-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:33:04 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '1'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_1d23b9f6159c495e97f858b9889065b7
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_3():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '193'
      content-type:
      - application/json
      cookie:
      - __cf_bm=l8sBLtWbJyPBSglmE_JwdV2cembTVUtg0hN4i5pufpk-1760412781-1.0.1.1-V8IxQKe5JvvUjsSxeueGfOe5cDgE5k41dJO7yLp37w71fQMNsqnxZDeSM1ixJx_B5fMC.IMsEq.z2Wz8Qgi341_m5GvyR6uP6BsrxWTzmvs;
        _cfuvid=4bziJsS7NURatI5tfaKtZ.KPLKDbs8gnPBekQLLYD0I-1760412781595-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e4035caf21ebe2-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:33:04 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '3'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_b8998a4654d9442f94c9ca6cd43780b6
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_4():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '193'
      content-type:
      - application/json
      cookie:
      - __cf_bm=l8sBLtWbJyPBSglmE_JwdV2cembTVUtg0hN4i5pufpk-1760412781-1.0.1.1-V8IxQKe5JvvUjsSxeueGfOe5cDgE5k41dJO7yLp37w71fQMNsqnxZDeSM1ixJx_B5fMC.IMsEq.z2Wz8Qgi341_m5GvyR6uP6BsrxWTzmvs;
        _cfuvid=4bziJsS7NURatI5tfaKtZ.KPLKDbs8gnPBekQLLYD0I-1760412781595-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e4035d4963ebe2-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:33:04 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '1'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_94d0e474095640dd85060a308f785817
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_5():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '193'
      content-type:
      - application/json
      cookie:
      - __cf_bm=l8sBLtWbJyPBSglmE_JwdV2cembTVUtg0hN4i5pufpk-1760412781-1.0.1.1-V8IxQKe5JvvUjsSxeueGfOe5cDgE5k41dJO7yLp37w71fQMNsqnxZDeSM1ixJx_B5fMC.IMsEq.z2Wz8Qgi341_m5GvyR6uP6BsrxWTzmvs;
        _cfuvid=4bziJsS7NURatI5tfaKtZ.KPLKDbs8gnPBekQLLYD0I-1760412781595-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e4035dfc0cebe2-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:33:04 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '1'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_fc5ee93dbe2544abad26a1a95e2bba34
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_6():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '193'
      content-type:
      - application/json
      cookie:
      - __cf_bm=l8sBLtWbJyPBSglmE_JwdV2cembTVUtg0hN4i5pufpk-1760412781-1.0.1.1-V8IxQKe5JvvUjsSxeueGfOe5cDgE5k41dJO7yLp37w71fQMNsqnxZDeSM1ixJx_B5fMC.IMsEq.z2Wz8Qgi341_m5GvyR6uP6BsrxWTzmvs;
        _cfuvid=4bziJsS7NURatI5tfaKtZ.KPLKDbs8gnPBekQLLYD0I-1760412781595-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e4035e7e0cebe2-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:33:04 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '0'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_34d4688bf4074b31956b1e29940fa831
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_7():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '193'
      content-type:
      - application/json
      cookie:
      - __cf_bm=l8sBLtWbJyPBSglmE_JwdV2cembTVUtg0hN4i5pufpk-1760412781-1.0.1.1-V8IxQKe5JvvUjsSxeueGfOe5cDgE5k41dJO7yLp37w71fQMNsqnxZDeSM1ixJx_B5fMC.IMsEq.z2Wz8Qgi341_m5GvyR6uP6BsrxWTzmvs;
        _cfuvid=4bziJsS7NURatI5tfaKtZ.KPLKDbs8gnPBekQLLYD0I-1760412781595-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e4035ebf00ebe2-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:33:04 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '0'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_9b3922eba52b48c6b5fac1d649f63c62
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_8():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '193'
      content-type:
      - application/json
      cookie:
      - __cf_bm=l8sBLtWbJyPBSglmE_JwdV2cembTVUtg0hN4i5pufpk-1760412781-1.0.1.1-V8IxQKe5JvvUjsSxeueGfOe5cDgE5k41dJO7yLp37w71fQMNsqnxZDeSM1ixJx_B5fMC.IMsEq.z2Wz8Qgi341_m5GvyR6uP6BsrxWTzmvs;
        _cfuvid=4bziJsS7NURatI5tfaKtZ.KPLKDbs8gnPBekQLLYD0I-1760412781595-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e4035f38d1ebe2-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:33:04 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '0'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_1db1ec378cdd4be2b97ef8436f0cb3f5
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_9():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '193'
      content-type:
      - application/json
      cookie:
      - __cf_bm=l8sBLtWbJyPBSglmE_JwdV2cembTVUtg0hN4i5pufpk-1760412781-1.0.1.1-V8IxQKe5JvvUjsSxeueGfOe5cDgE5k41dJO7yLp37w71fQMNsqnxZDeSM1ixJx_B5fMC.IMsEq.z2Wz8Qgi341_m5GvyR6uP6BsrxWTzmvs;
        _cfuvid=4bziJsS7NURatI5tfaKtZ.KPLKDbs8gnPBekQLLYD0I-1760412781595-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e4035faac3ebe2-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:33:04 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '1'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_6a9f5f4d048b40de9f5ea3790774dfa7
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["*.pyc\n__pycache__/\n.gitctx/"], "model": "text-embedding-3-large",
      "dimensions": 3072, "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '121'
      content-type:
      - application/json
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e406307d8feb34-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:34:59 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=YBwOowncif6XkGTO.SGrDCwsBBfU8JWrc0ksoldlXNY-1760412899-1.0.1.1-Gk95nSsKTqgynKxBL41YiUnbN5hfHTy_CtmT6DVOvA7Hdfd9S2ym7n0V3yDjJ89yIt6JLY.7EMf4fe0nhm05G7o8DtTE1VCh8s_qFGvUyE0;
        path=/; expires=Tue, 14-Oct-25 04:04:59 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=g47YP7Ts0N4Ern0qVVwq8UapFgK93llX1zJgVF3kr0k-1760412899988-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '1'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_036f61a9f6724518addd3c2e4a1b4c11
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_0():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '193'
      content-type:
      - application/json
      cookie:
      - __cf_bm=YBwOowncif6XkGTO.SGrDCwsBBfU8JWrc0ksoldlXNY-1760412899-1.0.1.1-Gk95nSsKTqgynKxBL41YiUnbN5hfHTy_CtmT6DVOvA7Hdfd9S2ym7n0V3yDjJ89yIt6JLY.7EMf4fe0nhm05G7o8DtTE1VCh8s_qFGvUyE0;
        _cfuvid=g47YP7Ts0N4Ern0qVVwq8UapFgK93llX1zJgVF3kr0k-1760412899988-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e406310f88eb34-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:35:00 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '0'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_fa1d5a9cdddd45e99f81a124ebb1ed58
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_1():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '193'
      content-type:
      - application/json
      cookie:
      - __cf_bm=YBwOowncif6XkGTO.SGrDCwsBBfU8JWrc0ksoldlXNY-1760412899-1.0.1.1-Gk95nSsKTqgynKxBL41YiUnbN5hfHTy_CtmT6DVOvA7Hdfd9S2ym7n0V3yDjJ89yIt6JLY.7EMf4fe0nhm05G7o8DtTE1VCh8s_qFGvUyE0;
        _cfuvid=g47YP7Ts0N4Ern0qVVwq8UapFgK93llX1zJgVF3kr0k-1760412899988-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e4063168dfeb34-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:35:00 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '0'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_759e829862c34bd9b97807f0064055c8
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_10():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=YBwOowncif6XkGTO.SGrDCwsBBfU8JWrc0ksoldlXNY-1760412899-1.0.1.1-Gk95nSsKTqgynKxBL41YiUnbN5hfHTy_CtmT6DVOvA7Hdfd9S2ym7n0V3yDjJ89yIt6JLY.7EMf4fe0nhm05G7o8DtTE1VCh8s_qFGvUyE0;
        _cfuvid=g47YP7Ts0N4Ern0qVVwq8UapFgK93llX1zJgVF3kr0k-1760412899988-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e40631dad1eb34-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:35:00 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '1'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_955bdacdb1974a64afd5ae5113f8a729
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_11():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=YBwOowncif6XkGTO.SGrDCwsBBfU8JWrc0ksoldlXNY-1760412899-1.0.1.1-Gk95nSsKTqgynKxBL41YiUnbN5hfHTy_CtmT6DVOvA7Hdfd9S2ym7n0V3yDjJ89yIt6JLY.7EMf4fe0nhm05G7o8DtTE1VCh8s_qFGvUyE0;
        _cfuvid=g47YP7Ts0N4Ern0qVVwq8UapFgK93llX1zJgVF3kr0k-1760412899988-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e406325ca6eb34-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:35:00 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '1'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_813adcdc74ec402ca5ae3a3be03c9b4d
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_12():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=YBwOowncif6XkGTO.SGrDCwsBBfU8JWrc0ksoldlXNY-1760412899-1.0.1.1-Gk95nSsKTqgynKxBL41YiUnbN5hfHTy_CtmT6DVOvA7Hdfd9S2ym7n0V3yDjJ89yIt6JLY.7EMf4fe0nhm05G7o8DtTE1VCh8s_qFGvUyE0;
        _cfuvid=g47YP7Ts0N4Ern0qVVwq8UapFgK93llX1zJgVF3kr0k-1760412899988-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e40632cebbeb34-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:35:00 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '1'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_2590dceb676d46529b9ce0e92f79be31
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_13():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=YBwOowncif6XkGTO.SGrDCwsBBfU8JWrc0ksoldlXNY-1760412899-1.0.1.1-Gk95nSsKTqgynKxBL41YiUnbN5hfHTy_CtmT6DVOvA7Hdfd9S2ym7n0V3yDjJ89yIt6JLY.7EMf4fe0nhm05G7o8DtTE1VCh8s_qFGvUyE0;
        _cfuvid=g47YP7Ts0N4Ern0qVVwq8UapFgK93llX1zJgVF3kr0k-1760412899988-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e406331874eb34-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:35:00 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '1'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_557bc4c0bcf344bead55c72f1d1a6316
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_14():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=YBwOowncif6XkGTO.SGrDCwsBBfU8JWrc0ksoldlXNY-1760412899-1.0.1.1-Gk95nSsKTqgynKxBL41YiUnbN5hfHTy_CtmT6DVOvA7Hdfd9S2ym7n0V3yDjJ89yIt6JLY.7EMf4fe0nhm05G7o8DtTE1VCh8s_qFGvUyE0;
        _cfuvid=g47YP7Ts0N4Ern0qVVwq8UapFgK93llX1zJgVF3kr0k-1760412899988-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e40633aa3deb34-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:35:00 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '2'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_723047801bfe41a094a2c6fe5adcec1c
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_15():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=YBwOowncif6XkGTO.SGrDCwsBBfU8JWrc0ksoldlXNY-1760412899-1.0.1.1-Gk95nSsKTqgynKxBL41YiUnbN5hfHTy_CtmT6DVOvA7Hdfd9S2ym7n0V3yDjJ89yIt6JLY.7EMf4fe0nhm05G7o8DtTE1VCh8s_qFGvUyE0;
        _cfuvid=g47YP7Ts0N4Ern0qVVwq8UapFgK93llX1zJgVF3kr0k-1760412899988-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e40633eb38eb34-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:35:00 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '0'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_2333fcf3e6f14337b40ec934034f28c8
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_16():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=YBwOowncif6XkGTO.SGrDCwsBBfU8JWrc0ksoldlXNY-1760412899-1.0.1.1-Gk95nSsKTqgynKxBL41YiUnbN5hfHTy_CtmT6DVOvA7Hdfd9S2ym7n0V3yDjJ89yIt6JLY.7EMf4fe0nhm05G7o8DtTE1VCh8s_qFGvUyE0;
        _cfuvid=g47YP7Ts0N4Ern0qVVwq8UapFgK93llX1zJgVF3kr0k-1760412899988-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e406346d61eb34-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:35:00 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '2'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_2427c6fa2d884fd39be838815787d876
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_17():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=YBwOowncif6XkGTO.SGrDCwsBBfU8JWrc0ksoldlXNY-1760412899-1.0.1.1-Gk95nSsKTqgynKxBL41YiUnbN5hfHTy_CtmT6DVOvA7Hdfd9S2ym7n0V3yDjJ89yIt6JLY.7EMf4fe0nhm05G7o8DtTE1VCh8s_qFGvUyE0;
        _cfuvid=g47YP7Ts0N4Ern0qVVwq8UapFgK93llX1zJgVF3kr0k-1760412899988-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e40634df3eeb34-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:35:00 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '1'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_a0bb8d55112c4d69b9be726f3aa01192
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_18():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=YBwOowncif6XkGTO.SGrDCwsBBfU8JWrc0ksoldlXNY-1760412899-1.0.1.1-Gk95nSsKTqgynKxBL41YiUnbN5hfHTy_CtmT6DVOvA7Hdfd9S2ym7n0V3yDjJ89yIt6JLY.7EMf4fe0nhm05G7o8DtTE1VCh8s_qFGvUyE0;
        _cfuvid=g47YP7Ts0N4Ern0qVVwq8UapFgK93llX1zJgVF3kr0k-1760412899988-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e406357999eb34-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:35:00 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '0'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_a656215200f84b69a342b7cf8cff3110
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_19():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=YBwOowncif6XkGTO.SGrDCwsBBfU8JWrc0ksoldlXNY-1760412899-1.0.1.1-Gk95nSsKTqgynKxBL41YiUnbN5hfHTy_CtmT6DVOvA7Hdfd9S2ym7n0V3yDjJ89yIt6JLY.7EMf4fe0nhm05G7o8DtTE1VCh8s_qFGvUyE0;
        _cfuvid=g47YP7Ts0N4Ern0qVVwq8UapFgK93llX1zJgVF3kr0k-1760412899988-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e40635eb36eb34-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:35:00 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '1'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_cf1aadc4c30644a99329db35c9b6dee1
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_2():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '193'
      content-type:
      - application/json
      cookie:
      - __cf_bm=YBwOowncif6XkGTO.SGrDCwsBBfU8JWrc0ksoldlXNY-1760412899-1.0.1.1-Gk95nSsKTqgynKxBL41YiUnbN5hfHTy_CtmT6DVOvA7Hdfd9S2ym7n0V3yDjJ89yIt6JLY.7EMf4fe0nhm05G7o8DtTE1VCh8s_qFGvUyE0;
        _cfuvid=g47YP7Ts0N4Ern0qVVwq8UapFgK93llX1zJgVF3kr0k-1760412899988-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e406366cf8eb34-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:35:00 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '0'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_d119e740bbc744d5bd27034777767e51
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_20():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=YBwOowncif6XkGTO.SGrDCwsBBfU8JWrc0ksoldlXNY-1760412899-1.0.1.1-Gk95nSsKTqgynKxBL41YiUnbN5hfHTy_CtmT6DVOvA7Hdfd9S2ym7n0V3yDjJ89yIt6JLY.7EMf4fe0nhm05G7o8DtTE1VCh8s_qFGvUyE0;
        _cfuvid=g47YP7Ts0N4Ern0qVVwq8UapFgK93llX1zJgVF3kr0k-1760412899988-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e40636ee8deb34-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:35:00 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '1'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_61ec416c2ef24387bff12f96437fe855
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_21():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=YBwOowncif6XkGTO.SGrDCwsBBfU8JWrc0ksoldlXNY-1760412899-1.0.1.1-Gk95nSsKTqgynKxBL41YiUnbN5hfHTy_CtmT6DVOvA7Hdfd9S2ym7n0V3yDjJ89yIt6JLY.7EMf4fe0nhm05G7o8DtTE1VCh8s_qFGvUyE0;
        _cfuvid=g47YP7Ts0N4Ern0qVVwq8UapFgK93llX1zJgVF3kr0k-1760412899988-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e40637583deb34-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:35:01 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '1'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_c9cb6e8d045f42e2a214d697a17f0b1f
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_22():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=YBwOowncif6XkGTO.SGrDCwsBBfU8JWrc0ksoldlXNY-1760412899-1.0.1.1-Gk95nSsKTqgynKxBL41YiUnbN5hfHTy_CtmT6DVOvA7Hdfd9S2ym7n0V3yDjJ89yIt6JLY.7EMf4fe0nhm05G7o8DtTE1VCh8s_qFGvUyE0;
        _cfuvid=g47YP7Ts0N4Ern0qVVwq8UapFgK93llX1zJgVF3kr0k-1760412899988-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e40637c9e7eb34-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:35:01 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '0'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_073439daf7154d99bdc8af4473e315e9
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_23():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=YBwOowncif6XkGTO.SGrDCwsBBfU8JWrc0ksoldlXNY-1760412899-1.0.1.1-Gk95nSsKTqgynKxBL41YiUnbN5hfHTy_CtmT6DVOvA7Hdfd9S2ym7n0V3yDjJ89yIt6JLY.7EMf4fe0nhm05G7o8DtTE1VCh8s_qFGvUyE0;
        _cfuvid=g47YP7Ts0N4Ern0qVVwq8UapFgK93llX1zJgVF3kr0k-1760412899988-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e406383b59eb34-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:35:01 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '0'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_603ea47125ca47ba8aed402b8af59107
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_24():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '194'
      content-type:
      - application/json
      cookie:
      - __cf_bm=YBwOowncif6XkGTO.SGrDCwsBBfU8JWrc0ksoldlXNY-1760412899-1.0.1.1-Gk95nSsKTqgynKxBL41YiUnbN5hfHTy_CtmT6DVOvA7Hdfd9S2ym7n0V3yDjJ89yIt6JLY.7EMf4fe0nhm05G7o8DtTE1VCh8s_qFGvUyE0;
        _cfuvid=g47YP7Ts0N4Ern0qVVwq8UapFgK93llX1zJgVF3kr0k-1760412899988-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e40638ad87eb34-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:35:01 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '2'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_b81f5580eceb405eb9053e466b72e435
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_3():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '193'
      content-type:
      - application/json
      cookie:
      - __cf_bm=YBwOowncif6XkGTO.SGrDCwsBBfU8JWrc0ksoldlXNY-1760412899-1.0.1.1-Gk95nSsKTqgynKxBL41YiUnbN5hfHTy_CtmT6DVOvA7Hdfd9S2ym7n0V3yDjJ89yIt6JLY.7EMf4fe0nhm05G7o8DtTE1VCh8s_qFGvUyE0;
        _cfuvid=g47YP7Ts0N4Ern0qVVwq8UapFgK93llX1zJgVF3kr0k-1760412899988-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e406393fceeb34-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:35:01 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '2'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_7153f81bd1cb4254b5804e5dea509e74
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_4():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '193'
      content-type:
      - application/json
      cookie:
      - __cf_bm=YBwOowncif6XkGTO.SGrDCwsBBfU8JWrc0ksoldlXNY-1760412899-1.0.1.1-Gk95nSsKTqgynKxBL41YiUnbN5hfHTy_CtmT6DVOvA7Hdfd9S2ym7n0V3yDjJ89yIt6JLY.7EMf4fe0nhm05G7o8DtTE1VCh8s_qFGvUyE0;
        _cfuvid=g47YP7Ts0N4Ern0qVVwq8UapFgK93llX1zJgVF3kr0k-1760412899988-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e406399938eb34-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:35:01 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '1'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_9fdce8e8acfb452a8bdbfcf4f9413911
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_5():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '193'
      content-type:
      - application/json
      cookie:
      - __cf_bm=YBwOowncif6XkGTO.SGrDCwsBBfU8JWrc0ksoldlXNY-1760412899-1.0.1.1-Gk95nSsKTqgynKxBL41YiUnbN5hfHTy_CtmT6DVOvA7Hdfd9S2ym7n0V3yDjJ89yIt6JLY.7EMf4fe0nhm05G7o8DtTE1VCh8s_qFGvUyE0;
        _cfuvid=g47YP7Ts0N4Ern0qVVwq8UapFgK93llX1zJgVF3kr0k-1760412899988-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e4063a4bf7eb34-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:35:01 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '2'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_6216086c2b3046daa8efbddec8d14a12
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_6():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '193'
      content-type:
      - application/json
      cookie:
      - __cf_bm=YBwOowncif6XkGTO.SGrDCwsBBfU8JWrc0ksoldlXNY-1760412899-1.0.1.1-Gk95nSsKTqgynKxBL41YiUnbN5hfHTy_CtmT6DVOvA7Hdfd9S2ym7n0V3yDjJ89yIt6JLY.7EMf4fe0nhm05G7o8DtTE1VCh8s_qFGvUyE0;
        _cfuvid=g47YP7Ts0N4Ern0qVVwq8UapFgK93llX1zJgVF3kr0k-1760412899988-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e4063ace04eb34-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:35:01 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '0'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_5a4507dade9449728b32d40a4232ef5f
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_7():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '193'
      content-type:
      - application/json
      cookie:
      - __cf_bm=YBwOowncif6XkGTO.SGrDCwsBBfU8JWrc0ksoldlXNY-1760412899-1.0.1.1-Gk95nSsKTqgynKxBL41YiUnbN5hfHTy_CtmT6DVOvA7Hdfd9S2ym7n0V3yDjJ89yIt6JLY.7EMf4fe0nhm05G7o8DtTE1VCh8s_qFGvUyE0;
        _cfuvid=g47YP7Ts0N4Ern0qVVwq8UapFgK93llX1zJgVF3kr0k-1760412899988-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e4063b587eeb34-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:35:01 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '1'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_2f91e4738e20446fa1b6db95c2792a94
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_8():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '193'
      content-type:
      - application/json
      cookie:
      - __cf_bm=YBwOowncif6XkGTO.SGrDCwsBBfU8JWrc0ksoldlXNY-1760412899-1.0.1.1-Gk95nSsKTqgynKxBL41YiUnbN5hfHTy_CtmT6DVOvA7Hdfd9S2ym7n0V3yDjJ89yIt6JLY.7EMf4fe0nhm05G7o8DtTE1VCh8s_qFGvUyE0;
        _cfuvid=g47YP7Ts0N4Ern0qVVwq8UapFgK93llX1zJgVF3kr0k-1760412899988-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e4063beacdeb34-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:35:01 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '1'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_1bf1022519744d5a8106868c9535947a
    status:
      code: 401
      message: Unauthorized
- request:
    body: '{"input": ["def function_9():\n    \"\"\"database functionality for testing.\"\"\"\n    return
      process_database()"], "model": "text-embedding-3-large", "dimensions": 3072,
      "encoding_format": "base64"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, zstd
      connection:
      - keep-alive
      content-length:
      - '193'
      content-type:
      - application/json
      cookie:
      - __cf_bm=YBwOowncif6XkGTO.SGrDCwsBBfU8JWrc0ksoldlXNY-1760412899-1.0.1.1-Gk95nSsKTqgynKxBL41YiUnbN5hfHTy_CtmT6DVOvA7Hdfd9S2ym7n0V3yDjJ89yIt6JLY.7EMf4fe0nhm05G7o8DtTE1VCh8s_qFGvUyE0;
        _cfuvid=g47YP7Ts0N4Ern0qVVwq8UapFgK93llX1zJgVF3kr0k-1760412899988-0.0.1.1-604800000
      host:
      - api.openai.com
      user-agent:
      - AsyncOpenAI/Python 2.2.0
      x-stainless-arch:
      - x64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 2.2.0
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.13.3
    method: POST
    uri: https://api.openai.com/v1/embeddings
  response:
    body:
      string: "{\n    \"error\": {\n        \"message\": \"Incorrect API key provided:
        sk-test-key. You can find your API key at https://platform.openai.com/account/api-keys.\",\n
        \       \"type\": \"invalid_request_error\",\n        \"param\": null,\n        \"code\":
        \"invalid_api_key\"\n    }\n}\n"
    headers:
      CF-RAY:
      - 98e4063c7d33eb34-SJC
      Connection:
      - keep-alive
      Content-Length:
      - '261'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Tue, 14 Oct 2025 03:35:01 GMT
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      cf-cache-status:
      - DYNAMIC
      vary:
      - Origin
      x-envoy-upstream-service-time:
      - '3'
      x-openai-proxy-wasm:
      - v0.1
      x-request-id:
      - req_f472ec2cb1cb4beb96fc2410a112116b
    status:
      code: 401
      message: Unauthorized
version: 1
